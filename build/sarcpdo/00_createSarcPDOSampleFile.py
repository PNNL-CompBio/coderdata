import synapseclient
import pandas as pd
import numpy as np
import argparse
import os

def download_and_format_genetic_samples(synLoginObject):
    """
    Download and format samples that have genetic data in the Sarcoma PDO project via Synapse. 
    
    Parameters 
    ----------
    synLoginObject : synapseclient.Synapse
        an object generated by a call to syn.login(PAT)

    Returns
    -------
    pd.DataFrame
        a dataframe containing formatted sample info 
    """
    # download genetic sample sheet, 15 rows
    geneticSampleSheet = synLoginObject.tableQuery("select * from syn61894699")
    geneticSampleDF = geneticSampleSheet.asDataFrame()
    # subset and rename
    genetic_samples = geneticSampleDF[['Sample_ID', 'Diagnosis']].rename({'Sample_ID':'common_name', 'Diagnosis':'cancer_type'}, axis=1)
    genetic_samples['species'] = 'Homo sapiens(Human)'
    genetic_samples['other_id_source'] = 'Synapse'
    # append "_Tumor" to be more similar to RNAseq other_id's 
    genetic_samples['other_id'] =  genetic_samples['common_name'].astype(str) + '_Tumor'
    # change underscores before '2' to be dash for within dataset consistency
    genetic_samples['other_id'] = genetic_samples['other_id'].str.replace("_2", "-2")
    genetic_samples['common_name'] = genetic_samples['common_name'].str.replace("_2", "-2")

    # assign all model types to tumor - is this correct?
    genetic_samples['model_type'] = 'tumor'
    # make empty column
    genetic_samples['other_names'] = ''
    # re-order columns
    genetic_samples = genetic_samples[['other_id', 'common_name', 'other_id_source', 'other_names', 'cancer_type', 'species', 'model_type']]

    return genetic_samples
    

def download_and_format_rna_samples(synLoginObject):
    """
    Download and format samples that have RNAseq data in the Sarcoma PDO project via Synapse. 

    Parameters 
    ----------
    synLoginObject : synapseclient.Synapse
        an object generated by a call to syn.login(PAT)

    Returns
    -------
    pd.DataFrame
        a dataframe containing formatted sample info 
    """
    # download rna sample sheet, 64 rows, 32 unique samples
    rnaSampleSheet = synLoginObject.tableQuery("select * from syn61894657")
    rnaSampleDF = rnaSampleSheet.asDataFrame()
    # select and rename columns 
    rna_samples = rnaSampleDF[['Sample_Name', 'individualID', 'diagnosis', 'experimentalCondition']].rename({"Sample_Name" : 'other_id', 'individualID':'common_name', 'diagnosis':'cancer_type', 'experimentalCondition':'model_type'}, axis=1)
    # subset to only include one of the paired-end IDs
    rna_samples = rna_samples[rna_samples['other_id'].str.contains("R1")]
    # trimming 'Sample_Name' to only include sample ID and model_type 
    rna_samples['other_id'] = rna_samples['other_id'].str.slice(0, -16)
    # add 3 columns below
    rna_samples['species'] = 'Homo sapiens(Human)'
    rna_samples['other_id_source'] = 'Synapse'
    rna_samples['other_names'] = ''
    # re-order columns
    rna_samples = rna_samples[['other_id', 'common_name', 'other_id_source', 'other_names', 'cancer_type', 'species', 'model_type']]
    # replace abbreviation (MPNST) with full name
    rna_samples.loc[rna_samples['cancer_type'] == 'MPNST', "cancer_type"] = 'Malignant peripheral nerve sheath tumor'
    # sarc00095_tumor duplicated, Ewing Sarcoma (in RNA) vs. CIC-rearranged sarcoma in DNA
    rna_samples.loc[rna_samples['cancer_type'] == 'Ewing sarcoma', "cancer_type"] = 'CIC-rearranged sarcoma'

    # Sarc0101, 0137 - change name in RNA to full 'Dedifferentiated liposarcoma
    rna_samples.loc[rna_samples['cancer_type'] == 'Dediff Liposarcoma', "cancer_type"] = 'Dedifferentiated liposarcoma'
    # Sarc 0120 - change name in RNA to full 'Well-differentiated liposarcoma'    
    rna_samples.loc[rna_samples['cancer_type'] == 'Well-diff Liposarcoma', "cancer_type"] = 'Well-differentiated liposarcoma'
    # clean up 'model_type' by removing 'Thawed' prefix in some rows
    modeltypeDF = rna_samples['model_type'].str.rsplit("_", expand =True)
    modeltypeDF.loc[modeltypeDF[0] =="Thawed", [0]] = modeltypeDF[1] 
    modeltypeDF[0] = modeltypeDF[0].str.lower()
    rna_samples['model_type'] = modeltypeDF[0]
    # add rows by hand for SARC0139_1 that are missing from sample sheet but present in rnaseq data
    addrow1 = {'other_id' : 'SARC0139_1_Tumor', 'common_name':'SARC0139_1', 'other_id_source' : 'Synapse', 'other_names':'', "cancer_type" : "Leiomyosarcoma", 'species':"Homo sapiens(Human)", 'model_type':'tumor'}
    addrow2 = {'other_id' : 'SARC0139_1_Organoid', 'common_name':'SARC0139_1', 'other_id_source' : 'Synapse', 'other_names':'', "cancer_type" : "Leiomyosarcoma", 'species':"Homo sapiens(Human)", 'model_type':'organoid'}
    rna_samples.loc[len(rna_samples)] = addrow1
    rna_samples.loc[len(rna_samples)] = addrow2

    return rna_samples

    #def generate_samples_file(prev_samples_path):

    # if prev_samples_path == "":
        #maxval = 0
   # else:
    #    maxval = max(pd.read_csv(prev_samples_path).improve_sample_id)

if __name__ == "__main__":
    print('in main')
    parser = argparse.ArgumentParser(description="This script handles downloading, processing and formatting of sample files for the Sarcoma PDO project into a single samplesheet")
    print('in line 97')
    parser.add_argument('-t', '--token', type=str, help='Synapse Token')

    parser.add_argument("-p", '--prevSamples', nargs="?", type=str, default ="", const  = "", help = "Use this to provide previous sample file, will run sample file generation")

    args = parser.parse_args()
    print(args)
    print("Logging into Synapse")
    PAT = args.token
    synObject = synapseclient.login(authToken=PAT)

    rnaTable = download_and_format_rna_samples(synObject)
    print(rnaTable.shape)
    geneticTable = download_and_format_genetic_samples(synObject)
    print(geneticTable.shape)
    merged = rnaTable.merge(geneticTable, how='outer')
    print(merged.shape)
    # change dash to underscore to align with omics data
    #merged['other_id'] = merged['other_id'].str.replace("-2", "_2")

    prev_max_improve_id = max(pd.read_csv(args.prevSamples).improve_sample_id)
    merged['improve_sample_id'] = range(prev_max_improve_id+1, prev_max_improve_id+merged.shape[0]+1) 

    merged.to_csv('/tmp/sarcpdo_samples.csv', index=False)

        # validate with: linkml validate -s coderdata/schema/coderdata.yaml ~/Downloads/sarcpdo_samples.csv

    # test script : python3 00_createSarcPDOSampleFile.py -t $SYNAPSE_AUTH_TOKEN -p '~/Downloads/mpnstpdx_samples.csv'

