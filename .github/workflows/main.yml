name: CI


on:
  push:
    branches:
      - builder_branch_JJ
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write


jobs:
  build-hcmi-samples:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-20.04
    environment: build
    steps:
      - name: Checkout  HCMI
        uses: actions/checkout@v2
        #Add upload artifact from CPTAC Samples when ready
        #temp fix below
      - name: Copy CPTAC sample from build location. 
        run: |
          cp build/cptac/cptac_samples.csv .
      - name: Build HCMI Image
        run: docker build -t hcmi-samples-builder -f build/docker/Dockerfile.hcmi .
      - name: Run HCMI samples Container
        run: docker run --name hcmi-samples-container hcmi-samples-builder python 01-createHCMISamplesFile.py
      - name: Copy file from HCMI Samples Container
        run: |
          mkdir hcmi-samples
          for file in hcmi_samples.csv; do
            docker cp hcmi-samples-container:/usr/src/app/$file hcmi-samples/$file
          done
      - name: Get HCMI container logs
        run: docker logs hcmi-samples-container 
      - name: Upload artifacts for HCMI
        uses: actions/upload-artifact@v2
        with:
          name: hcmi-samples
          path: hcmi-samples

  build-hcmi:
    if: github.actor != 'github-actions[bot]'
    needs: [build-hcmi-samples]
    runs-on: ubuntu-20.04
    environment: build
    steps:
      - name: Checkout  HCMI
        uses: actions/checkout@v2
      - name: Download artifacts from HCMI
        uses: actions/download-artifact@v2
        with:
          name: hcmi-samples
      - name: List files cwd
        run: ls -lah 
      - name: Build HCMI Image
        run: docker build -t hcmi-builder -f build/docker/Dockerfile.hcmi .
      - name: Run HCMI Container
        run: |
          docker run --name hcmi-container hcmi-builder /bin/bash -c "python 02-getHCMIData.py -m full_manifest.txt -t transcriptomics -o hcmi_transcriptomics.csv && python 02-getHCMIData.py -m full_manifest.txt -M full_manifest_files -t copy_number -o hcmi_copy_number.csv && python 02-getHCMIData.py -m full_manifest.txt -M full_manifest_files -t mutations -o hcmi_mutations.csv"
      - name: Copy files from HCMI Container
        run: |
          mkdir hcmi-files
          for file in hcmi_samples.csv hcmi_transcriptomics.csv hcmi_copy_number.csv hcmi_mutations.csv; do
            docker cp hcmi-container:/usr/src/app/$file hcmi-files/$file
          done
      - name: Get HCMI container logs
        run: docker logs hcmi-container
      # - name: dummy hcmi
      #   run: |
      #     mkdir hcmi-files
      #     echo "This is some sample text." > hcmi-files/d.txt
      #     echo "Another line of text." > hcmi-files/c.gz
      - name: Upload artifacts for HCMI
        uses: actions/upload-artifact@v2
        with:
          name: hcmi-files
          path: hcmi-files
  build-beataml-samples:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-20.04
    environment: build
    needs: [build-hcmi-samples]
    steps:
      #Add upload artifact from CPTAC Samples 
      - name: Checkout  BeatAML
        uses: actions/checkout@v2
      - name: Download artifacts from HCMI
        uses: actions/download-artifact@v2
        with:
          name: hcmi-samples
      - name: Build BeatAML Image
        run: docker build -t beataml-builder -f build/docker/Dockerfile.beataml .
      - name: Run BeatAML Container with samples option
        run: docker run --name beataml-samples-container beataml-builder python GetBeatAML.py --token ${{ secrets.SYNAPSE_TOKEN_SECRET }} --samples
      - name: Copy file from BeatAML Samples Container
        run: |
          mkdir beataml-samples
          for file in beataml_samples.csv; do
            docker cp beataml-samples-container:/usr/src/app/$file beataml-samples/$file
          done
      - name: Get BeatAML container logs
        run: docker logs beataml-samples-container 
      - name: Upload artifacts for BeatAML
        uses: actions/upload-artifact@v2
        with:
          name: beataml-samples
          path: beataml-samples
  build-beataml:
    if: github.actor != 'github-actions[bot]'
    needs: [build-beataml-samples]
    runs-on: ubuntu-20.04
    environment: build
    steps:
      - name: Checkout code BeatAML
        uses: actions/checkout@v2
      - name: Download artifacts from HCMI
        uses: actions/download-artifact@v2
        with:
          name: beataml-samples
      - name: List files cwd
        run: ls -lah 
      - name: Build BeatAML Image
        run: docker build -t beataml-builder -f build/docker/Dockerfile.beataml .
      - name: Run BeatAML Container
        run: docker run --name beataml-container beataml-builder python GetBeatAML.py --token ${{ secrets.SYNAPSE_TOKEN_SECRET }}
      - name: Copy files from BeatAML Container
        run: |
          mkdir beataml-files
          for file in beataml_samples.csv beataml_transcriptomics.csv beataml_proteomics.csv beataml_mutations.csv beataml_drugs.tsv beataml_experiments.csv; do
            docker cp beataml-container:/usr/src/app/$file beataml-files/$file
          done
      - name: Get BeatAML container logs
        run: docker logs beataml-container
      - name: Upload artifact for BeatAML
        uses: actions/upload-artifact@v2
        with:
          name: beataml-files
          path: beataml-files

  build-cell-line:
    if: github.actor != 'github-actions[bot]'
    needs: [build-hcmi-samples]
    runs-on: ubuntu-20.04
    environment: build
    steps:
      - name: Checkout code Cell Line
        uses: actions/checkout@v2
      - name: List files cwd before
        run: ls -lah 
      - name: Install coderdata
        run: pip install coderdata
      - name: Download cell_line data from coder data
        run: coderdata download --prefix cell_line
      - name: List files cwd after
        run: ls -lah 
      - name: Copy files from cell line Container
        run: |
          mkdir cell-line-files
          for file in *cell_line*sv*; do
            cp $file cell-line-files/$file
          done
      - name: Upload artifact for Cell Line
        uses: actions/upload-artifact@v2
        with:
          name: cell-line-files
          path: cell-line-files

  build-cptac:
    if: github.actor != 'github-actions[bot]'
    needs: [build-hcmi-samples]
    runs-on: ubuntu-20.04
    environment: build
    steps:
      - name: Checkout code cptac
        uses: actions/checkout@v2
      - name: List files cwd before
        run: ls -lah
      - name: Install coderdata
        run: pip install coderdata
      - name: Download cptac data from coder data
        run: coderdata download --prefix cptac
      - name: List files cwd after
        run: ls -lah 
      - name: Copy files from BeatAML Container
        run: |
          mkdir cptac-files
          for file in *cptac*sv*; do
            cp $file cptac-files/$file
          done
      - name: Upload artifact for cptac
        uses: actions/upload-artifact@v2
        with:
          name: cptac-files
          path: cptac-files

  data-visualization:
    if: github.actor != 'github-actions[bot]'
    needs: [build-hcmi, build-beataml]
    environment: build
    runs-on: ubuntu-20.04
    steps:
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
      - name: Install R packages
        run: |
          R -e "install.packages('RColorBrewer', dependencies=TRUE, repos='http://cran.rstudio.com/')"
          R -e "install.packages('circlize', dependencies=TRUE, repos='http://cran.rstudio.com/')"
          R -e "install.packages('dplyr', dependencies=TRUE, repos='http://cran.rstudio.com/')"
          R -e "install.packages('readr', dependencies=TRUE, repos='http://cran.rstudio.com/')"
          R -e "install.packages('tools', dependencies=TRUE, repos='http://cran.rstudio.com/')"
          R -e "install.packages('ggplot2', dependencies=TRUE, repos='http://cran.rstudio.com/')"
          R -e "install.packages('reshape2', dependencies=TRUE, repos='http://cran.rstudio.com/')"
          R -e "install.packages('ComplexUpset', dependencies=TRUE, repos='http://cran.rstudio.com/')"
      - name: checkout repo content
        uses: actions/checkout@v2
      - name: Download artifacts from HCMI
        uses: actions/download-artifact@v2
        with:
          name: hcmi-files
      - name: Download artifacts from BeatAML
        uses: actions/download-artifact@v2
        with:
          name: beataml-files
      - name: Download artifacts from Cell Line
        uses: actions/download-artifact@v2
        with:
          name: cell-line-files
      - name: Download artifacts from cptac
        uses: actions/download-artifact@v2
        with:
          name: cptac-files
      # - name: Install coderdata and skip build steps
      #   run: pip install coderdata
      # - name: Download cptac data from coder data
      #   run: coderdata download --prefix cptac
      # - name: Download cell_line data from coder data
      #   run: coderdata download --prefix cell_line
      # - name: Download all data from coder data
      #   run: coderdata download 
      - name: Create all-files directory
        run: mkdir all-files
      - name: List files cwd
        run: ls -lah 
      - name: List files dataSummary dir
        run: ls -lah dataSummary
      - name: Gzip all non-samples csv files in current dir.
        run: |
          find . -type f -name '*.csv' ! -name '*samples*' -exec gzip -k "{}" +
      - name: Run Visualization01
        if: success() || failure()
        run: Rscript dataSummary/visualization01.R
      - name: Run Visualization02
        if: success() || failure()
        run: Rscript dataSummary/visualization02.R
      - name: setup data-vis dir
        if: success() || failure()
        run: |
          mkdir -p data-vis
          rsync -av --remove-source-files --include='*.png' --include='*.pdf' --include='*table.csv' --exclude='*' . data-vis/
      - name: Upload artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: data-vis
          path: data-vis

  data-visualization-save-to-docs:
    if: github.actor != 'github-actions[bot]'
    needs: [data-visualization]
    environment: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo content
        uses: actions/checkout@v2
      - name: Download artifacts from data-vis
        uses: actions/download-artifact@v2
        with:
          name: data-vis
      - name: List files cwd
        run: ls -lah 
      - name: List files .. 
        run: ls -lah .. 
      - name: List files all 
        run: ls -lah * 
      - name: Move files to docs directory
        run: |
          rsync -av --remove-source-files --include='*.png' --include='*.pdf' --exclude='*' . docs/assets/stats
          rsync -av --remove-source-files --include='*table.csv' --exclude='*' . docs/_data
      #    rsync -av --remove-source-files --include='*.png' --include='*.pdf' --include='*table.csv' --exclude='*' . docs/
      - name: List files in docs after moving
        run: ls -lah docs
      - name: List files in local after moving
        run: ls -lah 
      - name: Setup Git config
        run: |
          git config user.name "jjacobson95"
          git config user.email "jeremy.jacobson3402@gmail.com"
      - name: Commit and push changes
        run: |
          git pull
          git add -f docs/*
          git status
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add data visualization artifacts to docs"
            git push
          fi
  upload-to-figshare:
    if: github.actor != 'github-actions[bot]'
    needs: [build-hcmi, build-beataml]
    environment: build
    runs-on: ubuntu-20.04
    steps:
      - name: checkout repo content
        uses: actions/checkout@v2
      - name: Download artifacts from HCMI
        uses: actions/download-artifact@v2
        with:
          name: hcmi-files
      - name: Download artifacts from BeatAML
        uses: actions/download-artifact@v2
        with:
          name: beataml-files
      - name: Download artifacts from CPTAC
        uses: actions/download-artifact@v2
        with:
          name: cptac-files
      - name: Download artifacts from Cell Line
        uses: actions/download-artifact@v2
        with:
          name: cell-line-files
      - name: Create all-files directory
        run: mkdir all-files
      - name: List files cwd
        run: ls -lah 
      - name: Move files to all-files
        run: |
          rsync -av --remove-source-files --include='*.csv' --include='*.tsv' --include='*.gz' --exclude='*' . all-files/
      - name: gzip all files in all-files
        run: gzip all-files/*
      - name: gunzip all samples files in all-files
        run: gunzip all-files/*samples*
      - name: List files in all-files
        run: ls -lah all-files/
      # - name: Upload to Figshare
      #   # This can be updated to trigger with tag releases.
      #   # run: python scripts/push_to_figshare.py --directory all-files --title "CODERData${{ github.event.release.tag_name }}" --token ${{ secrets.FIGSHARE_TOKEN_SECRET }} -p False
      #   #This is a short term alternative. Links to branch. Not as pretty but okay for now.
        
      #   #To do: Extract version number from setup.py and run there. This can occur after merge with package dev branch.
      #   run: python scripts/push_to_figshare.py --directory all-files --title "CODERData${{ github.ref }}" --token ${{ secrets.FIGSHARE_TOKEN_SECRET }} --project_id 189342 --publish 
      - name: Extract version from setup.py
        id: version
        run: echo "PACKAGE_VERSION=$(grep 'version=' setup.py | sed -n "s/.*version='\(.*\)'.*/\1/p")" >> $GITHUB_ENV
      - name: Upload to Figshare
        run: python scripts/push_to_figshare.py --directory all-files --title "CODERData${{ env.PACKAGE_VERSION }}" --token ${{ secrets.FIGSHARE_TOKEN_SECRET }} --project_id 189342 --publish
      - name: List files in all-files
        run: ls -lah all-files/
      - name: Setup Git config
        run: |
          git config user.name "jjacobson95"
          git config user.email "jeremy.jacobson3402@gmail.com"
      - name: Commit and push changes
        run: |
          git pull
          cp figshare_latest.yml docs/_data
          mv figshare_latest.yml build/download/figshare_latest.yml
          git add -f docs/*
          git add build/download/figshare_latest.yml
          git status
          git commit -m "Add figshare_latest.yml to docs/_data and build/download"
          git push
  # build-docs:
  #   if: github.actor != 'github-actions[bot]'
  #   runs-on: ubuntu-20.04
  #   environment: build
  #   steps:
  #     - name: Checkout  repo
  #       uses: actions/checkout@v2
  #     - name: pip install reqs
  #       run: |
  #         pip install -r requirements.txt 
  #         pip install tabulate
  #     - name: Run docs script
  #       run: python scripts/update_docs_CI.py
  #     - name: Setup Git config
  #       run: |
  #         git config user.name "jjacobson95"
  #         git config user.email "jeremy.jacobson3402@gmail.com"
  #     - name: Commit and push changes
  #       run: |
  #         git pull
  #         git add docs/*
  #         git commit -m "Add figshare stats to docs"
  #         git push
  build-docs:
    if: github.actor != 'github-actions[bot]'
    needs: [data-visualization-save-to-docs, upload-to-figshare]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: List files cwd
        run: ls -lah 
      - name: List files with wildcard
        run: ls -lah *
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy-docs:
    if: github.actor != 'github-actions[bot]'
    needs: [build-docs]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  run-tests:
    if: github.actor != 'github-actions[bot]'
    needs: [upload-to-figshare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-file: [
          'test_download_and_load_beataml.py', 
          'test_download_and_load_cell_line.py', 
          'test_download_beataml_cli.py', 
          'test_download_cell_line_cli.py',
          'test_download_and_load_cptac.py', 
          'test_download_and_load_hcmi.py', 
          'test_download_cptac_cli.py', 
          'test_download_hcmi_cli.py'
        ]
    outputs:
      result: ${{ steps.test-outcome.outcome }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist
    - name: Install as package
      run: |
        pip install .
    - name: Run test
      id: test-outcome
      run: |
        pytest -n 4 tests/${{ matrix.test-file }}

  build-and-publish:
    if: github.actor != 'github-actions[bot]'
    needs: [run-tests]
    runs-on: ubuntu-latest
    environment: build
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Fetch tags from main branch
      run: |
        git fetch origin 'refs/tags/*:refs/tags/*'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine packaging

    - name: Update version
      run: |
        # Extract the current version from setup.py
        CURRENT_VERSION=$(grep -oP "version='\K[0-9]+\.[0-9]+\.[0-9]+" setup.py)
        echo "Current version: $CURRENT_VERSION"

        # Fetch tags and get the latest tag, removing the 'v' prefix
        git fetch --tags
        LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` | sed 's/^v//')
        echo "Latest tag: $LATEST_TAG"

        # Use Python to compare versions
        HIGHER_VERSION=$(python -c "from packaging.version import parse as parse_version; \
                                    current = parse_version('$CURRENT_VERSION'); \
                                    latest = parse_version('$LATEST_TAG'); \
                                    print(current if current > latest else latest)")
        echo "Higher version: $HIGHER_VERSION"

        # If current version is higher, increment patch version in setup.py
        if [ "$CURRENT_VERSION" == "$HIGHER_VERSION" ]; then
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          echo "Incremented version: $NEW_VERSION"
          sed -i "s/version='\([0-9]\+\.[0-9]\+\.\)[0-9]\+'/version='\1$PATCH'/" setup.py

          # Commit and push the updated setup.py
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add setup.py
          git commit -m "Increment version number to $NEW_VERSION [skip ci]"
          git push
        else
          echo "No version increment needed"
        fi
    - name: Build local and publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN_SECRET }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/* --verbose

